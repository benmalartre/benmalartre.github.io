
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 
// requestAnimationFrame polyfill by Erik MÃ¶ller
// fixes from Paul Irish and Tino Zijdel
 
(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                   || window[vendors[x]+'CancelRequestAnimationFrame'];
    }
 
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); },
              timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
 
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
}());

// Global Manager Object
var m;

// Window On Load Event	
window.addEventListener('load', initWindow, false);

function initWindow(){
	initAudioAPI();
	m.Init();
}

var clicked = false;
window.addEventListener('click',clickWindow,false);

function clickWindow(){
	clicled = true;
}

function Manager(){
	this.objects = new Array();
	
	this.AddObject = function(object){
		this.objects.push(object);
	}
	
	this.Init = function(){
		for(var i=0;i<this.objects.length;i++){
			if(this.objects[i].Init)this.objects[i].Init();
		}

	}

	this.Update = function(value){
		for(var i=0;i<this.objects.length;i++){
			this.objects[i].Update(mouseX,mouseY);
		}

	}
}


